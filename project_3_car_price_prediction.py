# -*- coding: utf-8 -*-
"""Project_3_Car_Price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lqpjnvkWykhE3O1kOD4fVpRPcdIw-U-s

#Linear & lasso regression
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

#data collection and processing
car_dataset = pd.read_csv('/content/car data.csv')
car_dataset.head()

car_dataset.shape

car_dataset.info()

car_dataset.isnull().sum()

#checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

# encoding "Fuel_Type" Column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

# encoding "Seller_Type" Column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)

# encoding "Transmission" Column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

#splitting the data into train and spiliting dataset
x = car_dataset.drop(['Selling_Price','Car_Name'],axis=1)
y = car_dataset['Selling_Price']
print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state=2)

#Model Training
#Linear Regression Model
linear_reg_model = LinearRegression()

linear_reg_model.fit(x_train,y_train)

#Evaluate model based on training dataset
training_data_prediction = linear_reg_model.predict(x_train)
#r square error
score_1 = metrics.r2_score(y_train, training_data_prediction)
print('R squared error is: ', score_1)

plt.scatter(y_train, training_data_prediction)
plt.xlabel('Actutal Value')
plt.ylabel('Predicted Value')
plt.title('Actual value vs Predicted value')
plt.show()

#Prediction on Testing data
testing_data_prediction = linear_reg_model.predict(x_test)
score_2 = metrics.r2_score(y_test, testing_data_prediction)
print('R squared error is: ', score_2)

plt.scatter(y_test, testing_data_prediction)
plt.xlabel('Actutal Value')
plt.ylabel('Predicted Value')
plt.title('Actual value vs Predicted value')
plt.show()

"""#Lasso Regression Model"""

#Model Training
#Linear Regression Model
lass_reg_model = Lasso()

lass_reg_model.fit(x_train, y_train)

training_data_prediction=lass_reg_model.predict(x_train)
score_3 = metrics.r2_score(y_train, training_data_prediction)
print('R square error is: ', score_3)

plt.scatter(y_train, training_data_prediction)
plt.xlabel('Actutal Value')
plt.ylabel('Predicted Value')
plt.title('Actual value vs Predicted value')
plt.show()

testing_data_prediction = lass_reg_model.predict(x_test)

score_4 = metrics.r2_score(y_test, testing_data_prediction)
print('R square error is: ', score_4)

plt.scatter(y_test, testing_data_prediction)
plt.xlabel('Actutal Value')
plt.ylabel('Predicted Value')
plt.title('Actual value vs Predicted value')
plt.show()

"""XGBoost model"""

from xgboost import XGBRegressor

model = XGBRegressor()

model.fit(x_train, y_train)
model_prediction = model.predict(x_train)

print(model_prediction)

score_5 = metrics.r2_score(y_train, model_prediction)
print('R squared error is: ', score_5)

plt.scatter(y_train, model_prediction)
plt.xlabel('Actutal Value')
plt.ylabel('Predicted Value')
plt.title('Actual value vs Predicted value')
plt.show()

test_data_prediction = model.predict(x_test)
score_6 = metrics.r2_score(y_test, test_data_prediction)
print('R square error is:', score_6)

plt.scatter(y_test, test_data_prediction)
plt.xlabel('Actutal Value')
plt.ylabel('Predicted Value')
plt.title('Actual value vs Predicted value')
plt.show()

