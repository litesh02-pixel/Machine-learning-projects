# -*- coding: utf-8 -*-
"""Project_2_House_Price_predicition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a_t-GrkG-0_7vQkMwDloXDSmfjFqslX1

Import dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import sklearn.datasets 
from xgboost import XGBRegressor
from sklearn import metrics

# importing boston house price datasets
house_price_dataset = sklearn.datasets.load_boston()
print(house_price_dataset)

#Loading the dataset to a pandas dataframe
house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns=house_price_dataset.feature_names)

house_price_dataframe.head()

#add the target column (price) to the DataFrame
house_price_dataframe['price']=house_price_dataset.target
house_price_dataframe.head()

house_price_dataframe.shape

#check missing values in the datasets
house_price_dataframe.isnull().sum()

#Statistical Measures
house_price_dataframe.describe()

#Understanding the correlation between various features in the datasets
correlation = house_price_dataframe.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

#separating feartures (data) and labels(target)
x = house_price_dataframe.drop(['price'], axis=1)
y = house_price_dataframe['price']
print(x)
print(y)

#splitting the dataset
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=2)
print(x.shape, x_train.shape, x_test.shape)

#training the model(XGBoost Regressor)
#loading the model
model = XGBRegressor()

#training a model with x_train datasets
model.fit(x_train, y_train)

#model Evaluation- accuracy for prediction on training data
model_prediction = model.predict(x_train)
print(model_prediction)

#R square error
score_1 = metrics.r2_score(y_train, model_prediction)
score_2 = metrics.mean_absolute_error(y_train, model_prediction)
print('R square error is: ', score_1)
print('Mean Absolute Error is: ', score_2)

plt.scatter(y_train,model_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Predicted Price")
plt.show()

#prediction on test data
test_data_prediction = model.predict(x_test)
score_1 = metrics.r2_score(y_test, test_data_prediction)
score_2 = metrics.mean_absolute_error(y_test, test_data_prediction)
print('R square error is: ', score_1)
print('Mean Absolute Error is: ', score_2)

