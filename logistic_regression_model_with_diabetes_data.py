# -*- coding: utf-8 -*-
"""Logistic_Regression_model_with_diabetes_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_0dMjC5JzTe8lG1xXswbl1DHPG7ag6B-

Logistic Regression Model
"""

import numpy as np
class Logistic_Regression():
  def __init__(self, learning_rate, no_of_iterations):
    self.learning_rate = learning_rate
    self.no_of_iterations = no_of_iterations


  def fit(self,x,y):
    self.m, self.n = x.shape

    self.w = np.zeros(self.n)
    self.b = 0
    self.x = x
    self.y = y

    for i in range(self.no_of_iterations):
      self.update_weights()

  def update_weights(self):
    #y_hat formula--sigmoid function
    Y_hat = 1 / (1 + np.exp( - (self.x.dot(self.w) + self.b ) ))
    dw = (1/self.m)*np.dot(self.x.T, (Y_hat - self.y))
    db = (1/self.m)*np.sum(Y_hat - self.y)

      #updating the weight and bias in Gradient Descent
    self.w = self.w - self.learning_rate * dw

    self.b = self.b - self.learning_rate * db
    
  def predict(self,x):
    y_pred = 1/(1+np.exp(-(x.dot(self.w)+self.b)))
    y_pred = np.where( y_pred > 0.5, 1, 0)
    return y_pred

"""Diabetes datasets"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

diabetes_data = pd.read_csv('/content/diabetes.csv')
diabetes_data.head()

diabetes_data.shape

x = diabetes_data.drop(['Outcome'], axis=1)
y = diabetes_data['Outcome']
print(x)
print(y)

#standardized the datasets
scaler = StandardScaler()
scaler.fit(x)
standarized_data = scaler.transform(x)
print(standarized_data)

x = standarized_data
print(x)
print(y)

#split the dataset
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=2)
print(x.shape,  x_train.shape, x_test.shape)

#training the model
classifier = Logistic_Regression(learning_rate=0.01, no_of_iterations = 1000)

classifier.fit(x_train, y_train)

x_train_prediction = classifier.predict(x_train)
training_data_prediction = accuracy_score(y_train, x_train_prediction)
print('Accuracy of training data: ', training_data_prediction)

#Accuracy on test data
x_data_prediction = classifier.predict(x_test)
test_data_prediction = accuracy_score(y_test, x_data_prediction)
print('Accuracy of test data: ', test_data_prediction)

#making predictive system
input_data = (5,166,72,19,175,25.8,0.587,51)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
print(input_data_reshaped)

#standarized dataset
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0]==0):
  print('The person is not diabetic')

else: 
  print('The person is diabetic')

